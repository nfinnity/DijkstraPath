GENERAL DESCRIPTION
Dijkstra's Algorithm is a greedy algorithm that appears to do the best thing at each stage by finding the smallest non-marked vertex.The simple explanation for how this algorithm generally works is shown below:
1) Set up 4 parallel arrays or a struct with four parameters for vertices, marks, weights, and the previous value.
2) Mark your starting location and mark where you can go from that point.
3) Find the smallest non-marked vertex and include any prevous distances in the new value for the weight.
4) Continue until all of the vertices have been marked. 
The result is the shortest path/smallest cost to reach every vertex.

PROJECT DESCRIPTION AND IMPLEMENTATION
Applying this to the project generates many other smaller, in-between steps that must be taken care of in order to implement this algorithm. The project essentially allows the user to input a file that contains pairs of vertices, along with the values associated with the pairings (in this case, two cities and the distance between those two cities). The data from the file will be used to build a graph, and then the vertices will be stored into a vector. A single array of structs will be created with each slot being for a vertex. The struct will include the vertex name, whether it has been marked, its weight, and a string representing the previous vertex that was visited. All of the marked fields in the struct for every vertex will be initialized to false, as none of them have yet been chosen. All of the weight fields should also be initialized to some max integer for weight based on the input so that they will not be considered among the current smallest for those vertices that have already been initialized. 



METHODS USED
void checkInFile(int argc): This method essentially check if the input file is valid (whether it exists in the current directory).

// Computes Dijkstra's Algorithm:
void dijkstra(Graph<string> &dGraph, int numVertices, VertexType myVertices[])

// Assign weights based on the starting location
void assignWeights(Graph<string> &dGraph, int numVertices, VertexType myVertices[], int startingLocation, Queue<string>& getTo)

bool allMarked(int numVertices, VertexType myVertices[]): This method checks to see if all of the vertices have been marked because
it should immediately stop if all of them are marked. It will be called after each Dijkstra manipulation on a vertex.

void buildDGraph(Graph<string> &dGraph, string filename, string cities[], int &numVertices, int &numEdges, VertexType myVertices[]): A graph
is built based on the data from the external file.

void printCities(Graph<string> dGraph, int numVertices, VertexType myVertices[], string cities[]):
This is presented in the beginning of the output and prints each city in alphabetical order with 3 per line.

void insertionSort(string cities[], int numVertices): This is a method to sort the cities in alphabetical order.

string setStart(string start, Graph<string> &dGraph, int numVertices, VertexType myVertices[]): This method sets the 
starting value for the Dijkstra's algorithm, which is given as input from the user during the file run.

// Finds the minimum non-marked values in VertexType Array:
int findMin(VertexType myVertices[], int numVertices): This method returns the minimum non-marked value inside the array of structs of vertices.

// Prints a given row in a Summary Table:
void printRow(int location, VertexType myVertices[]): This prints out the summary table for all vertices and their associated information once a route
has been found.


RUN THROUGH ginfile2.dat (starting at V1)
The input of the file is:
V1;V2;2		--> A graph of these vertices and weights would be generated.
V2;V5;10
V1;V4;1
V3;V1;4
V3;V6;5
V5;V7;6
V2;V4;3
V4;V6;8
V4;V3;2
V4;V5;2
V4;V7;4
V7;V6;1

Step 1:
Mark V1 and caluclate distances.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2		|	  	   |	 2      |    V1
--------------------------------------------
V3		|		   |	        | 
--------------------------------------------
V4		|	  	   |	 1      |    V1
--------------------------------------------
V5		|	       |	        | 
--------------------------------------------
V6		|	       |	        | 
--------------------------------------------
V7		|	       |	        | 
--------------------------------------------

Step 2:
Nark V4 and calculate distances.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2		|	       |	 2      |    V1
--------------------------------------------
V3		|    	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5		|	       |	 3      |    V4
--------------------------------------------
V6		|	       |	 9      |    V4
--------------------------------------------
V7		|	       |	 5      |    V4
--------------------------------------------

Step 3:
Mark V2 and check new distances. No path
is better, so nothing is changed.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2*		|   T2	   |	 2      |    V1
--------------------------------------------
V3		|    	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5		|	       |	 3      |    V4
--------------------------------------------
V6		|	       |	 9      |    V4
--------------------------------------------
V7		|	       |	 5      |    V4
--------------------------------------------

Step 4:
Mark V3 and check new distances. The path from
V3 to V6 is better than V6's current path from
V4, so it is changed.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2*		|   T2	   |	 2      |    V1
--------------------------------------------
V3*		|   T3 	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5		|	       |	 3      |    V4
--------------------------------------------
V6		|	       |	 8      |    V3
--------------------------------------------
V7		|	       |	 5      |    V4
--------------------------------------------

Step 5:
Mark V5 and check distances. No path is
better, so nothing is changed.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2*		|   T2	   |	 2      |    V1
--------------------------------------------
V3*		|   T3 	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5*		|   T4	   |	 3      |    V4
--------------------------------------------
V6		|	       |	 8      |    V3
--------------------------------------------
V7		|	       |	 5      |    V4
--------------------------------------------

Step 6:
Mark V7 and check distances. Path from V7
to V6 is better than V6's current path from
V3, so it is changed.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2*		|   T2	   |	 2      |    V1
--------------------------------------------
V3*		|   T3 	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5*		|   T4	   |	 3      |    V4
--------------------------------------------
V6		|	       |	 6      |    V7
--------------------------------------------
V7*		|   T5	   |	 5      |    V4
--------------------------------------------

Step 7:
Mark V6, and V6 cannot continue anywhere.
Everything is marked, and the algorithm is
complete.
Vertex  |  Marked  |  Distance  |  Previous
--------------------------------------------
V1*		|   T0	   |	 0      |   N/A
--------------------------------------------  
V2*		|   T2	   |	 2      |    V1
--------------------------------------------
V3*		|   T3 	   |	 3      |    V4
--------------------------------------------
V4*		|   T1	   |	 1      |    V1
--------------------------------------------
V5*		|   T4	   |	 3      |    V4
--------------------------------------------
V6*		|   T6	   |	 6      |    V7
--------------------------------------------
V7*		|   T5	   |	 5      |    V4
--------------------------------------------

The path is found recursively and it is:
V1   0            	 
V4   1                  
V2   2                  
V3   3               
V5   3              
V7   5            
V6   6          
